#!/bin/bash
#
# Script that reports helpful information for building C++ applications
# against the MARLEY libraries
#
# Note that, when MARLEY is built against ROOT, availability of the
# root-config script on the system PATH is assumed
#
# Revised 1 June 2020 by Steven Gardiner <gardiner@fnal.gov>

# If the MARLEY environment variable is set, then use it to form
# the subdirectory names. If not, then deduce the right value from
# the location of this script (presumably the build/ folder)
if [ -z "$MARLEY" ]; then
  topdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"
else
  topdir=${MARLEY}
fi

bindir=${topdir}/build
datadir=${topdir}/data
incdir=${topdir}/include
libdir=${topdir}/build
srcdir=${topdir}/src

## Variable names surrounded by @@ will be replaced with appropriate
## values at build time. See build/Makefile for details.
version=@@VERSION@@
git_rev=@@GIT_REVISION@@
cxx_std=@@CXX_STD@@
hepmc3_cflags=@@HEPMC3_CFLAGS@@
hepmc3_libs=@@HEPMC3_LIBS@@

# Add the "USE_ROOT" preprocessor macro definition to the
# compiler flags if ROOT support is enabled
use_root=@@USE_ROOT@@
if [ "$use_root" = "yes" ]; then
  root_cflags=$(root-config --cflags)
  root_cflags="${root_cflags} -DUSE_ROOT"
fi

cflags="${hepmc3_cflags} ${root_cflags} -std=${cxx_std} -I${incdir}"

# Set up the linker commands for the MARLEY shared libraries. If ROOT support
# is enabled, then include the extra library containing the needed
# dictionaries.
libs="-L${libdir} -lMARLEY ${hepmc3_libs}"
if [ "$use_root" = "yes" ]; then
  libs="${libs} -lMARLEY_ROOT"
  root_libs=$(root-config --libs)
  libs="${libs} ${root_libs}"
fi

# If no command-line arguments are given to this script, then print a usage
# message
usage_msg="Usage: marley-config [--bindir] [--cflags] [--cxx-std] [--datadir]"
usage_msg="${usage_msg} [--libs] [--libdir] [--incdir] [--srcdir] [--topdir]"
usage_msg="${usage_msg} [--use-root] [--version] [--git-revision] [--help]"

if [ $# -eq 0 ]; then
  echo "${usage_msg}"
  exit 1
fi

# If any of the command-line arguments is "--help", then print the help message
for arg in "$@"; do
  if [ "$arg" = "--help" ]; then
    echo "Usage: marley-config [options]"
    echo ""
    echo "  --cflags          Print compiler flags and header path"
    echo "  --cxx-std         Print the C++ standard used when building MARLEY"
    echo "  --bindir          Print the executable directory"
    echo "  --datadir         Print the data directory"
    echo "  --libs            Print MARLEY libraries"
    echo "  --libdir          Print the library directory"
    echo "  --incdir          Print the header directory"
    echo "  --srcdir          Print the source code directory"
    echo "  --topdir          Print the top-level MARLEY directory"
    echo "  --use-root        Print whether or not ROOT support is enabled"
    echo "  --version         Print the MARLEY version"
    echo "  --git-revision    Print the MARLEY git revision number"
    echo "  --help            Print this message"
    exit 2
  fi
done

# Define an empty variable that will hold the printed output of the script
out=""

# Loop over the command-line arguments and append the requested information
# to the output
for arg in "$@"; do
  case $arg in
    --cflags)
      out="$out $cflags"
    ;;
    --cxx-std)
      out="$out $cxx_std"
    ;;
    --bindir)
      out="$out $bindir"
    ;;
    --datadir)
      out="$out $datadir"
    ;;
    --libs)
      out="$out $libs"
    ;;
    --libdir)
      out="$out $libdir"
    ;;
    --incdir)
      out="$out $incdir"
    ;;
    --srcdir)
      out="$out $srcdir"
    ;;
    --topdir)
      out="$out $topdir"
    ;;
    --use-root)
      out="$out $use_root"
    ;;
    --version)
      out="$out $version"
    ;;
    --git-revision)
      out="$out $git_rev"
    ;;
    *)
      echo "Unknown argument \"${arg}\"!"
      echo "${usage_msg}"
      exit 3
  esac
done

# Print the completed output to the screen
echo $out
